// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/google/wire"
	"go.didapinche.com/foundation/apollo-plus/internal/app/adminservice"
	"go.didapinche.com/foundation/apollo-plus/internal/app/adminservice/controllers"
	"go.didapinche.com/foundation/apollo-plus/internal/app/adminservice/repositories"
	"go.didapinche.com/foundation/apollo-plus/internal/app/adminservice/services"
	"go.didapinche.com/foundation/apollo-plus/internal/pkg/app"
	"go.didapinche.com/foundation/apollo-plus/internal/pkg/config"
	"go.didapinche.com/foundation/apollo-plus/internal/pkg/db"
	"go.didapinche.com/foundation/apollo-plus/internal/pkg/http"
	"go.didapinche.com/foundation/apollo-plus/internal/pkg/httpclient"
	"go.didapinche.com/foundation/apollo-plus/internal/pkg/log"
)

// Injectors from wire.go:

func CreateApps(cf string) (*app.Application, error) {
	viper, err := config.New(cf)
	if err != nil {
		return nil, err
	}
	options, err := log.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	logger, err := log.New(options)
	if err != nil {
		return nil, err
	}
	adminserviceOptions, err := adminservice.NewOptions(viper, logger)
	if err != nil {
		return nil, err
	}
	httpOptions, err := http.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	dbOptions, err := db.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	gormDB, err := db.New(dbOptions, logger)
	if err != nil {
		return nil, err
	}
	itemRepisitory := repositories.NewItemRepisitory(gormDB)
	itemService := services.NewItemService(itemRepisitory, gormDB)
	appNamespaceRepository := repositories.NewAppNamespaceRepository(gormDB)
	appNamespaceService := services.NewAppNamespaceService(gormDB, itemRepisitory, itemService, appNamespaceRepository)
	appNamespaceController := controllers.NewAppNamespaceController(appNamespaceService)
	itemController := controllers.NewItemController(itemService)
	releaseMessageRepository := repositories.NewReleaseMessageRepository()
	release := repositories.NewRelease(gormDB)
	releaseMessageService := services.NewReleaseMessageService(releaseMessageRepository, release, appNamespaceRepository, itemRepisitory, gormDB)
	releaseController := controllers.NewReleaseController(releaseMessageService)
	initControllers := controllers.InitControllersFn(appNamespaceController, itemController, releaseController)
	engine, err := http.NewRouter(httpOptions, logger, initControllers)
	if err != nil {
		return nil, err
	}
	server, err := http.New(httpOptions, logger, engine)
	if err != nil {
		return nil, err
	}
	application, err := adminservice.NewApp(adminserviceOptions, logger, server)
	if err != nil {
		return nil, err
	}
	return application, nil
}

// wire.go:

var providerSets = wire.NewSet(log.ProviderSet, config.ProviderSet, db.ProviderSet, controllers.ProviderSet, services.ProviderSet, repositories.ProviderSet, adminservice.ProviderSet, http.ProviderSet, httpclient.ProviderSet)
