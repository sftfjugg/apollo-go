// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"apollo-adminserivce/internal/app/portal"
	"apollo-adminserivce/internal/app/portal/address"
	"apollo-adminserivce/internal/app/portal/clients"
	"apollo-adminserivce/internal/app/portal/controllers"
	"apollo-adminserivce/internal/app/portal/repositories"
	"apollo-adminserivce/internal/app/portal/services"
	"apollo-adminserivce/internal/pkg/app"
	"apollo-adminserivce/internal/pkg/config"
	"apollo-adminserivce/internal/pkg/db"
	"apollo-adminserivce/internal/pkg/http"
	"apollo-adminserivce/internal/pkg/httpclient"
	"apollo-adminserivce/internal/pkg/log"
	"apollo-adminserivce/internal/pkg/zeus"
	"github.com/google/wire"
)

// Injectors from wire.go:

func CreateApps(cf string) (*app.Application, error) {
	viper, err := config.New(cf)
	if err != nil {
		return nil, err
	}
	options, err := log.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	logger, err := log.New(options)
	if err != nil {
		return nil, err
	}
	portalOptions, err := portal.NewOptions(viper, logger)
	if err != nil {
		return nil, err
	}
	httpOptions, err := http.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	dbOptions, err := db.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	gormDB, err := db.New(dbOptions, logger)
	if err != nil {
		return nil, err
	}
	zeusZeus, err := zeus.New(viper)
	if err != nil {
		return nil, err
	}
	tChanLimosService, err := clients.NewLimosService(zeusZeus)
	if err != nil {
		return nil, err
	}
	tChanUicService, err := clients.NewUicService(zeusZeus)
	if err != nil {
		return nil, err
	}
	appdRepository := repositories.NewAppRepository(gormDB)
	appService := services.NewAppService(gormDB, tChanLimosService, tChanUicService, appdRepository)
	appController := controllers.NewAppController(appService)
	client := httpclient.New()
	httpClient := clients.NewHttpClient(client)
	appNamespaceRelatedRepository := repositories.NewAppNamespaceRelatedRepository(gormDB)
	itemRelatedRepisitory := repositories.NewItemRelatedRepisitory(gormDB)
	appNamespaceService := services.NewAppNamespaceService(httpClient, appNamespaceRelatedRepository, itemRelatedRepisitory)
	appNamespaceController := controllers.NewAppNamespaceController(appNamespaceService)
	itemService := services.NewItemService(httpClient)
	itemController := controllers.NewItemController(itemService)
	itemRelatedService := services.NewItemRelatedService(gormDB, itemRelatedRepisitory)
	itemRelatedController := controllers.NewItemRelatedControllerr(itemRelatedService)
	releaseService := services.NewReleaseService(httpClient)
	releaseController := controllers.NewReleaseController(releaseService)
	appNamespaceRelatedService := services.NewAppNamespaceRelatedService(gormDB, appNamespaceRelatedRepository, itemRelatedRepisitory)
	appNamespaceRelatedController := controllers.NewAppNamespaceRelatedController(appNamespaceRelatedService)
	initControllers := controllers.InitControllersFn(appController, appNamespaceController, itemController, itemRelatedController, releaseController, appNamespaceRelatedController)
	engine, err := http.NewRouter(httpOptions, logger, initControllers)
	if err != nil {
		return nil, err
	}
	server, err := http.New(httpOptions, logger, engine)
	if err != nil {
		return nil, err
	}
	addressOptions, err := address.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	meta, err := address.NewMetas(addressOptions)
	if err != nil {
		return nil, err
	}
	addressService := services.NewAddress(meta)
	application, err := portal.NewApp(portalOptions, logger, server, addressService)
	if err != nil {
		return nil, err
	}
	return application, nil
}

// wire.go:

var providerSets = wire.NewSet(log.ProviderSet, config.ProviderSet, db.ProviderSet, zeus.ProviderSet, clients.ProviderSet, repositories.ProviderSet, services.ProviderSet, controllers.ProviderSet, address.ProviderSet, http.ProviderSet, httpclient.ProviderSet, portal.ProviderSet)
